'use strict';

var _deepEqual = require('deep-equal');

var _deepEqual2 = _interopRequireDefault(_deepEqual);

var _querystring = require('querystring');

var _querystring2 = _interopRequireDefault(_querystring);

var _harness = require('fortune/test/harness');

var _http = require('fortune/test/http');

var _http2 = _interopRequireDefault(_http);

var _lib = require('../lib');

var _lib2 = _interopRequireDefault(_lib);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var mediaType = 'application/vnd.api+json';
var test = _http2.default.bind(null, {
  serializers: [{ type: _lib2.default }]
});

(0, _harness.run)(function () {
  (0, _harness.comment)('get ad-hoc index');
  return test('/', null, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(response.headers['content-type'] === mediaType, 'content type is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('create record');
  return test('/animals', {
    method: 'post',
    headers: { 'Content-Type': mediaType },
    body: {
      data: {
        id: 4,
        type: 'animal',
        attributes: {
          name: 'Rover',
          type: 'Chihuahua',
          birthday: new Date().toJSON(),
          picture: new Buffer('This is a string.').toString('base64'),
          'favorite-food': 'Bacon',
          nicknames: ['Doge', 'The Dog']
        },
        relationships: {
          owner: {
            data: { type: 'users', id: 1 }
          }
        }
      }
    }
  }, function (response) {
    (0, _harness.ok)(response.status === 201, 'status is correct');
    (0, _harness.ok)(response.headers['content-type'] === mediaType, 'content type is correct');
    (0, _harness.ok)(~response.headers['location'].indexOf('/animals/4'), 'location header looks right');
    (0, _harness.ok)(response.body.data.type === 'animals', 'type is correct');
    (0, _harness.ok)(response.body.data.attributes['favorite-food'] === 'Bacon', 'inflected key value is correct');
    (0, _harness.ok)(new Buffer(response.body.data.attributes.picture, 'base64').toString() === 'This is a string.', 'buffer is correct');
    (0, _harness.ok)(Date.now() - new Date(response.body.data.attributes.birthday).getTime() < 60 * 1000, 'date is close enough');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('create record with existing ID should fail');
  return test('/users', {
    method: 'post',
    headers: { 'Content-Type': mediaType },
    body: {
      data: {
        id: 1,
        type: 'user'
      }
    }
  }, function (response) {
    (0, _harness.ok)(response.status === 409, 'status is correct');
    (0, _harness.ok)(response.headers['content-type'] === mediaType, 'content type is correct');
    (0, _harness.ok)(response.body.errors.length === 1, 'error is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('create record with wrong route should fail');
  return test('/users/4', {
    method: 'post',
    headers: { 'Content-Type': mediaType }
  }, function (response) {
    (0, _harness.ok)(response.status === 405, 'status is correct');
    (0, _harness.ok)(response.headers['allow'] === 'GET, PATCH, DELETE', 'allow header is correct');
    (0, _harness.ok)(response.body.errors.length === 1, 'error exists');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('create record with wrong type should fail');
  return test('/users', { method: 'post' }, function (response) {
    (0, _harness.ok)(response.status === 415, 'status is correct');
    (0, _harness.ok)(response.headers['content-type'] === mediaType, 'content type is correct');
    (0, _harness.ok)(response.body.errors.length === 1, 'error exists');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('update record #1');
  return test('/users/2', {
    method: 'patch',
    headers: { 'Content-Type': mediaType },
    body: {
      data: {
        id: 2,
        type: 'users',
        attributes: {
          name: 'Jenny Death',
          'camel-case-field': 'foobar'
        },
        relationships: {
          spouse: {
            data: { type: 'users', id: 3 }
          },
          'owned-pets': {
            data: [{ type: 'animals', id: 3 }]
          },
          enemies: {
            data: [{ type: 'users', id: 3 }]
          },
          friends: {
            data: [{ type: 'users', id: 1 }, { type: 'users', id: 3 }]
          }
        }
      }
    }
  }, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(Math.abs(new Date(response.body.data.attributes['last-modified']).getTime() - Date.now()) < 5 * 1000, 'update modifier is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('update record #2');
  return test('/animals/1', {
    method: 'patch',
    headers: { 'Content-Type': mediaType },
    body: {
      data: {
        id: 1,
        type: 'animals',
        attributes: {
          nicknames: ['Foo', 'Bar']
        }
      }
    }
  }, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(Math.abs(new Date(response.body.data.attributes['last-modified']).getTime() - Date.now()) < 5 * 1000, 'update modifier is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('sort a collection and use sparse fields');
  return test('/users?' + _querystring2.default.stringify({
    'sort': 'birthday,-name',
    'fields[user]': 'name,birthday'
  }), null, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(~response.body.links.self.indexOf('/users'), 'link is correct');
    (0, _harness.ok)((0, _deepEqual2.default)(response.body.data.map(function (record) {
      return record.attributes.name;
    }), ['John Doe', 'Microsoft Bob', 'Jane Doe']), 'sort order is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('filter a collection');
  return test('/users?' + _querystring2.default.stringify({
    'filter[name]': 'John Doe,Jane Doe',
    'filter[birthday]': '1992-12-07'
  }), null, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(~response.body.links.self.indexOf('/users'), 'link is correct');
    (0, _harness.ok)((0, _deepEqual2.default)(response.body.data.map(function (record) {
      return record.attributes.name;
    }).sort(), ['John Doe']), 'match is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('dasherizes the camel cased fields');
  return test('/users/1', null, function (response) {
    (0, _harness.ok)(response.body.data.attributes['camel-case-field'] === 'Something with a camel case field.', 'camel case field is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('find a single record with include');
  return test('/animals/1?' + _querystring2.default.stringify({ include: 'owner.friends' }), null, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(~response.body.links.self.indexOf('/animals/1'), 'link is correct');
    (0, _harness.ok)(response.body.data.id === '1', 'id is correct');
    (0, _harness.ok)((0, _deepEqual2.default)(response.body.included.map(function (record) {
      return record.type;
    }), ['users', 'users']), 'type is correct');
    (0, _harness.ok)((0, _deepEqual2.default)(response.body.included.map(function (record) {
      return record.id;
    }).sort(function (a, b) {
      return a - b;
    }), ['1', '3']), 'id is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('show individual record with encoded ID');
  return test('/animals/%2Fwtf', null, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(~response.body.links.self.indexOf('/animals/%2Fwtf'), 'link is correct');
    (0, _harness.ok)(response.body.data.id === '/wtf', 'id is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('find a single non-existent record');
  return test('/animals/404', null, function (response) {
    (0, _harness.ok)(response.status === 404, 'status is correct');
    (0, _harness.ok)('errors' in response.body, 'errors object exists');
    (0, _harness.ok)(response.body.errors[0].title === 'NotFoundError', 'title is correct');
    (0, _harness.ok)(response.body.errors[0].detail.length, 'detail exists');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('delete a single record');
  return test('/animals/2', { method: 'delete' }, function (response) {
    (0, _harness.ok)(response.status === 204, 'status is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('find a singular related record');
  return test('/users/2/spouse', null, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(~response.body.links.self.indexOf('/users/2/spouse'), 'link is correct');
    (0, _harness.ok)(!Array.isArray(response.body.data), 'data type is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('find a plural related record');
  return test('/users/2/owned-pets', null, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(~response.body.links.self.indexOf('/users/2/owned-pets'), 'link is correct');
    (0, _harness.ok)(response.body.data.length === 2, 'data length is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('find a collection of non-existent related records');
  return test('/users/3/owned-pets', null, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(~response.body.links.self.indexOf('/users/3/owned-pets'), 'link is correct');
    (0, _harness.ok)(Array.isArray(response.body.data) && !response.body.data.length, 'data is empty array');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('find an empty collection');
  return test(encodeURI('/☯s'), null, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(~response.body.links.self.indexOf(encodeURI('/☯s')), 'link is correct');
    (0, _harness.ok)(Array.isArray(response.body.data) && !response.body.data.length, 'data is empty array');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('get an array relationship entity');
  return test('/users/2/relationships/owned-pets', null, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(~response.body.links.self.indexOf('/users/2/relationships/owned-pets'), 'link is correct');
    (0, _harness.ok)((0, _deepEqual2.default)(response.body.data.map(function (data) {
      return data.id;
    }), [2, 3]), 'ids are correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('get an empty array relationship entity');
  return test('/users/3/relationships/owned-pets', null, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(~response.body.links.self.indexOf('/users/3/relationships/owned-pets'), 'link is correct');
    (0, _harness.ok)((0, _deepEqual2.default)(response.body.data, []), 'data is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('get a singular relationship entity');
  return test('/users/1/relationships/spouse', null, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(~response.body.links.self.indexOf('/users/1/relationships/spouse'), 'link is correct');
    (0, _harness.ok)(response.body.data.type === 'users', 'type is correct');
    (0, _harness.ok)(response.body.data.id === 2, 'id is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('get an empty singular relationship entity');
  return test('/users/3/relationships/spouse', null, function (response) {
    (0, _harness.ok)(response.status === 200, 'status is correct');
    (0, _harness.ok)(~response.body.links.self.indexOf('/users/3/relationships/spouse'), 'link is correct');
    (0, _harness.ok)(response.body.data === null, 'data is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('update a singular relationship entity');
  return test('/users/2/relationships/spouse', {
    method: 'patch',
    headers: { 'Content-Type': mediaType },
    body: {
      data: { type: 'users', id: 3 }
    }
  }, function (response) {
    (0, _harness.ok)(response.status === 204, 'status is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('update an array relationship entity');
  return test('/users/1/relationships/owned-pets', {
    method: 'patch',
    headers: { 'Content-Type': mediaType },
    body: {
      data: [{ type: 'animals', id: 2 }]
    }
  }, function (response) {
    (0, _harness.ok)(response.status === 204, 'status is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('post to an array relationship entity');
  return test('/users/1/relationships/owned-pets', {
    method: 'post',
    headers: { 'Content-Type': mediaType },
    body: {
      data: [{ type: 'animals', id: 2 }]
    }
  }, function (response) {
    (0, _harness.ok)(response.status === 204, 'status is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('delete from an array relationship entity');
  return test('/users/1/relationships/friends', {
    method: 'delete',
    headers: { 'Content-Type': mediaType },
    body: {
      data: [{ type: 'users', id: 3 }]
    }
  }, function (response) {
    (0, _harness.ok)(response.status === 204, 'status is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('respond to options: index');
  return test('/', { method: 'options' }, function (response) {
    (0, _harness.ok)(response.status === 204, 'status is correct');
    (0, _harness.ok)(response.headers['allow'] === 'GET', 'allow header is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('respond to options: collection');
  return test('/animals', { method: 'options' }, function (response) {
    (0, _harness.ok)(response.status === 204, 'status is correct');
    (0, _harness.ok)(response.headers['allow'] === 'GET, POST', 'allow header is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('respond to options: individual');
  return test('/animals/1', { method: 'options' }, function (response) {
    (0, _harness.ok)(response.status === 204, 'status is correct');
    (0, _harness.ok)(response.headers['allow'] === 'GET, PATCH, DELETE', 'allow header is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('respond to options: link');
  return test('/animals/1/owner', { method: 'options' }, function (response) {
    (0, _harness.ok)(response.status === 204, 'status is correct');
    (0, _harness.ok)(response.headers['allow'] === 'GET', 'allow header is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('respond to options: relationships');
  return test('/animals/1/relationships/owner', { method: 'options' }, function (response) {
    (0, _harness.ok)(response.status === 204, 'status is correct');
    (0, _harness.ok)(response.headers['allow'] === 'GET, POST, PATCH, DELETE', 'allow header is correct');
  });
});

(0, _harness.run)(function () {
  (0, _harness.comment)('respond to options: fail');
  return test('/foo', { method: 'options' }, function (response) {
    (0, _harness.ok)(response.status === 404, 'status is correct');
  });
});