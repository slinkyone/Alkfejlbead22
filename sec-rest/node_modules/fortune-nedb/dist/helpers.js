'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.idKey = undefined;
exports.inputRecord = inputRecord;
exports.outputRecord = outputRecord;
exports.mapValues = mapValues;
exports.castValue = castValue;

var _defineProperty2 = require('babel-runtime/helpers/defineProperty');

var _defineProperty3 = _interopRequireDefault(_defineProperty2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _keys = require('babel-runtime/core-js/object/keys');

var _keys2 = _interopRequireDefault(_keys);

var _defineProperty4 = require('babel-runtime/core-js/object/define-property');

var _defineProperty5 = _interopRequireDefault(_defineProperty4);

var _getOwnPropertyNames = require('babel-runtime/core-js/object/get-own-property-names');

var _getOwnPropertyNames2 = _interopRequireDefault(_getOwnPropertyNames);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var bufferEncoding = 'base64';

var idKey = exports.idKey = '_id';

// Cast and assign values per field.
function inputRecord(type, record) {
  var recordTypes = this.recordTypes;
  var keys = this.keys;

  var clone = {};
  var fields = recordTypes[type];
  var toString = function toString(buffer) {
    return buffer.toString(bufferEncoding);
  };

  // ID business.
  var id = record[keys.primary];
  clone[idKey] = id ? id : generateId();

  for (var field in record) {
    if (field === keys.primary) continue;
    clone[field] = record[field];
  }

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = (0, _getIterator3.default)((0, _getOwnPropertyNames2.default)(fields)), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var field = _step.value;

      var fieldType = fields[field][keys.type];
      var fieldIsArray = fields[field][keys.isArray];

      if (!(field in record)) {
        clone[field] = fieldIsArray ? [] : null;
        continue;
      }

      // NeDB lacks native support for buffer types.
      if (fieldType === Buffer && record[field]) {
        clone[field] = fieldIsArray ? record[field].map(toString) : toString(record[field]);
        continue;
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return clone;
}

function outputRecord(type, record) {
  var recordTypes = this.recordTypes;
  var keys = this.keys;

  var clone = {};
  var fields = recordTypes[type];
  var toBuffer = function toBuffer(string) {
    return new Buffer(string, bufferEncoding);
  };

  // ID business.
  clone[keys.primary] = record[idKey];

  for (var field in record) {
    if (!(field in fields)) continue;

    var value = record[field];
    var fieldType = fields[field][keys.type];

    // NeDB lacks native support for buffer types.
    if (fieldType === Buffer && record[field]) {
      clone[field] = fields[field][keys.isArray] ? value.map(toBuffer) : new Buffer(value, bufferEncoding);
      continue;
    }

    // Do not enumerate denormalized fields.
    if (fields[field][keys.denormalizedInverse]) {
      (0, _defineProperty5.default)(clone, field, {
        configurable: true, writable: true, value: value
      });
      continue;
    }

    clone[field] = value;
  }

  return clone;
}

/**
 * Immutable mapping on an object.
 *
 * @param {Object} object
 * @param {Function} map should return the first argument, which is the value
 * @return {Object}
 */
function mapValues(object, map) {
  return (0, _keys2.default)(object).reduce(function (clone, key) {
    return (0, _assign2.default)(clone, (0, _defineProperty3.default)({}, key, map(object[key], key)));
  }, {});
}

/**
 * Cast non-native types.
 *
 * @param {*} value
 * @return {*}
 */
function castValue(value) {
  if (Buffer.isBuffer(value)) return value.toString(bufferEncoding);

  return value;
}

/**
 * Generate base64 string from 15 bytes of strong randomness (this is 2 less
 * bits of entropy than UUID version 4). It is ideal for the length of the
 * input to be divisible by 3, since base64 expands the binary input by
 * exactly 1 byte for every 3 bytes, and adds padding length of modulus 3.
 *
 * @return {String}
 */
function generateId() {
  return _crypto2.default.randomBytes(15).toString(bufferEncoding);
}